#!/usr/bin/env node

var fs = require('fs');
var https = require('https');
var privateKey  = fs.readFileSync('certificates/key.pem', 'utf8');
var certificate = fs.readFileSync('certificates/cert.pem', 'utf8');

var credentials = {key: privateKey, cert: certificate};

var app = require('../app');
var debug = require('debug')('code:server');
var socketIO = require('socket.io');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '8443');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = https.createServer(credentials, app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}


const {execSync} = require('child_process');
var io = socketIO.listen(server);
io.sockets.on('connection', function(socket) {

    // convenience function to log server messages on the client
    //function log() {
    //    var array = ['Message from server:'];
    //    array.push.apply(array, arguments);
    //    socket.emit('log', array);
    //}

    socket.on('message', function(message) {
        console.log('Client said: ', message);
        // for a real app, would be room-only (not broadcast)
        console.log(message);
        socket.broadcast.emit('message', message);
    });

    socket.on('disconnect', function(message) {
        console.log('Client said: ', message);
        // for a real app, would be room-only (not broadcast)
        console.log(message);
        socket.broadcast.emit('disconnection', message);
    });

    socket.on('chatmessage', function(message) {
        console.log('test said: ', message);
        // for a real app, would be room-only (not broadcast)
        let output = execSync('echo "' + message + '" | apertium en-es');
        //socket.broadcast.emit('chatmessage', output.toString());
        socket.broadcast.emit('chatmessage', message);
    });

    socket.on('create or join', function(room) {
        console.log('Received request to create or join room ' + room);

        var clientsInRoom = io.sockets.adapter.rooms[room];
        var numClients = clientsInRoom ? Object.keys(clientsInRoom.sockets).length : 0;
        console.log('Room ' + room + ' now has ' + numClients + ' client(s)');

        if (numClients === 0) {
            socket.join(room);
            console.log('Client ID ' + socket.id + ' created room ' + room);
            socket.emit('created', room, socket.id);

        } else if (numClients === 1) {
            console.log('Client ID ' + socket.id + ' joined room ' + room);
            io.sockets.in(room).emit('join', room);
            socket.join(room);
            socket.emit('joined', room, socket.id);
            io.sockets.in(room).emit('ready');
        } else { // max two clients
            socket.emit('full', room);
        }
    });

    socket.on('ipaddr', function() {
        var ifaces = os.networkInterfaces();
        for (var dev in ifaces) {
            ifaces[dev].forEach(function(details) {
                if (details.family === 'IPv4' && details.address !== '127.0.0.1') {
                    socket.emit('ipaddr', details.address);
                }
            });
        }
    });

    socket.on('bye', function(){
        console.log('received bye');
    });

});
